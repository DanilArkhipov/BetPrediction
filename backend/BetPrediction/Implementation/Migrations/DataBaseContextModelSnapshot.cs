// <auto-generated />
using System;
using Implementation.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Implementation.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    partial class DataBaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repositories.Models.Entities.GameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Cluster")
                        .HasColumnType("int");

                    b.Property<long?>("DireTeamOpenDotaId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Engine")
                        .HasColumnType("int");

                    b.Property<long?>("GameDuration")
                        .HasColumnType("bigint");

                    b.Property<int?>("GameMode")
                        .HasColumnType("int");

                    b.Property<long?>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<int?>("LobbyType")
                        .HasColumnType("int");

                    b.Property<long>("MatchId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MatchSeqNum")
                        .HasColumnType("bigint");

                    b.Property<int?>("Patch")
                        .HasColumnType("int");

                    b.Property<long?>("RadiantTeamOpenDotaId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("RadiantWin")
                        .HasColumnType("bit");

                    b.Property<long?>("Region")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReplaySalt")
                        .HasColumnType("bigint");

                    b.Property<string>("ReplayUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SeriesId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SeriesType")
                        .HasColumnType("bigint");

                    b.Property<int?>("Skill")
                        .HasColumnType("int");

                    b.Property<long?>("StartTime")
                        .HasColumnType("bigint");

                    b.Property<int?>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Repositories.Models.Entities.HeroEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LocalizedName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpenDotaId")
                        .HasColumnType("int");

                    b.Property<string>("OpenDotaRelativeHeroIconUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenDotaRelativeHeroImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Heroes");
                });

            modelBuilder.Entity("Repositories.Models.Entities.LeagueEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("LeagueId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("Repositories.Models.Entities.PatchEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OpenDotaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Patches");
                });

            modelBuilder.Entity("Repositories.Models.Entities.PickBanEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPick")
                        .HasColumnType("bit");

                    b.Property<int>("OpenDotaHeroId")
                        .HasColumnType("int");

                    b.Property<bool>("RadiantTeam")
                        .HasColumnType("bit");

                    b.Property<bool>("Win")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PickBans");
                });

            modelBuilder.Entity("Repositories.Models.Entities.PlayerEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("AvatarFullUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarMediumUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Cheese")
                        .HasColumnType("int");

                    b.Property<string>("CountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FantasyRole")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPro")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("LocalCountryCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("LockedUntil")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PlayersMatchHistoryLastUpdateDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("PlayersMatchHistoryUnavailable")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SteamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<Guid?>("TeamId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeamName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamTag")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId1");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Repositories.Models.Entities.PlayerGameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Abandons")
                        .HasColumnType("int");

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<double?>("ActionsPerMinute")
                        .HasColumnType("float");

                    b.Property<int?>("AncientKills")
                        .HasColumnType("int");

                    b.Property<long?>("AssistsCount")
                        .HasColumnType("bigint");

                    b.Property<int?>("BuyBackCount")
                        .HasColumnType("int");

                    b.Property<int?>("CampsStackedCount")
                        .HasColumnType("int");

                    b.Property<int?>("CourierKills")
                        .HasColumnType("int");

                    b.Property<int?>("CreepsStackedCount")
                        .HasColumnType("int");

                    b.Property<int?>("Deaths")
                        .HasColumnType("int");

                    b.Property<int?>("Denies")
                        .HasColumnType("int");

                    b.Property<int>("DoubleKillsCount")
                        .HasColumnType("int");

                    b.Property<int?>("FirstTenMinutesIntervalDenies")
                        .HasColumnType("int");

                    b.Property<int?>("FirstTenMinutesIntervalGold")
                        .HasColumnType("int");

                    b.Property<int?>("FirstTenMinutesIntervalLastHit")
                        .HasColumnType("int");

                    b.Property<int?>("FirstTenMinutesIntervalXp")
                        .HasColumnType("int");

                    b.Property<long?>("GameId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Gold")
                        .HasColumnType("int");

                    b.Property<double?>("GoldPerMinute")
                        .HasColumnType("float");

                    b.Property<int?>("GoldSpent")
                        .HasColumnType("int");

                    b.Property<double?>("HeroDamage")
                        .HasColumnType("float");

                    b.Property<double?>("HeroHealing")
                        .HasColumnType("float");

                    b.Property<int?>("HeroKills")
                        .HasColumnType("int");

                    b.Property<int?>("HeroOpenDotaId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsRoaming")
                        .HasColumnType("bit");

                    b.Property<double?>("Kda")
                        .HasColumnType("float");

                    b.Property<int?>("KillsCount")
                        .HasColumnType("int");

                    b.Property<double?>("KillsPerMin")
                        .HasColumnType("float");

                    b.Property<int?>("Lane")
                        .HasColumnType("int");

                    b.Property<double?>("LaneEfficiency")
                        .HasColumnType("float");

                    b.Property<double?>("LaneEfficiencyPct")
                        .HasColumnType("float");

                    b.Property<int?>("LaneKills")
                        .HasColumnType("int");

                    b.Property<int?>("LaneRole")
                        .HasColumnType("int");

                    b.Property<int?>("LastHits")
                        .HasColumnType("int");

                    b.Property<int?>("LeaverStatus")
                        .HasColumnType("int");

                    b.Property<int?>("Level")
                        .HasColumnType("int");

                    b.Property<int?>("NecronomiconKills")
                        .HasColumnType("int");

                    b.Property<int?>("NeutralKills")
                        .HasColumnType("int");

                    b.Property<int?>("ObsPlaced")
                        .HasColumnType("int");

                    b.Property<int?>("ObserverKills")
                        .HasColumnType("int");

                    b.Property<int?>("ObserverUses")
                        .HasColumnType("int");

                    b.Property<int>("RampagesCount")
                        .HasColumnType("int");

                    b.Property<int?>("RankTier")
                        .HasColumnType("int");

                    b.Property<int?>("RoshanKills")
                        .HasColumnType("int");

                    b.Property<int?>("RunePickUps")
                        .HasColumnType("int");

                    b.Property<int?>("SecondTenMinutesIntervalDenies")
                        .HasColumnType("int");

                    b.Property<int?>("SecondTenMinutesIntervalGold")
                        .HasColumnType("int");

                    b.Property<int?>("SecondTenMinutesIntervalLastHit")
                        .HasColumnType("int");

                    b.Property<int?>("SecondTenMinutesIntervalXp")
                        .HasColumnType("int");

                    b.Property<int?>("SenPlaced")
                        .HasColumnType("int");

                    b.Property<int?>("SentryKills")
                        .HasColumnType("int");

                    b.Property<int?>("SentryUses")
                        .HasColumnType("int");

                    b.Property<double?>("Stuns")
                        .HasColumnType("float");

                    b.Property<int?>("ThirdTenMinutesIntervalDenies")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdTenMinutesIntervalGold")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdTenMinutesIntervalLastHit")
                        .HasColumnType("int");

                    b.Property<int?>("ThirdTenMinutesIntervalXp")
                        .HasColumnType("int");

                    b.Property<int?>("TotalGold")
                        .HasColumnType("int");

                    b.Property<int?>("TotalXp")
                        .HasColumnType("int");

                    b.Property<double?>("TowerDamage")
                        .HasColumnType("float");

                    b.Property<int?>("TowerKills")
                        .HasColumnType("int");

                    b.Property<int>("TripleKillsCount")
                        .HasColumnType("int");

                    b.Property<int>("UltraKillsCount")
                        .HasColumnType("int");

                    b.Property<bool?>("Win")
                        .HasColumnType("bit");

                    b.Property<double?>("XpPerMin")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("PlayerGames");
                });

            modelBuilder.Entity("Repositories.Models.Entities.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("LastMatchTimeStamp")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TeamRating")
                        .HasColumnType("float");

                    b.Property<string>("TeamTag")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalLosses")
                        .HasColumnType("int");

                    b.Property<int>("TotalWins")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Repositories.Models.Entities.PlayerEntity", b =>
                {
                    b.HasOne("Repositories.Models.Entities.TeamEntity", "Team")
                        .WithMany("TeamMembers")
                        .HasForeignKey("TeamId1");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Repositories.Models.Entities.TeamEntity", b =>
                {
                    b.Navigation("TeamMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
